<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白一梓的个人博客</title>
  
  
  <link href="https://blog.whyun.com/atom.xml" rel="self"/>
  
  <link href="https://blog.whyun.com/"/>
  <updated>2021-12-19T09:10:56.081Z</updated>
  <id>https://blog.whyun.com/</id>
  
  <author>
    <name>yunnysunny</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内外网 DNS 分流解决方案</title>
    <link href="https://blog.whyun.com/posts/local-dns-masq/"/>
    <id>https://blog.whyun.com/posts/local-dns-masq/</id>
    <published>2021-12-12T16:00:00.000Z</published>
    <updated>2021-12-19T09:10:56.081Z</updated>
    
    
    <summary type="html">一般公司内部都会有内部 DNS 服务器，由于托管公司内网域名，且会当成公司内部上网的专用 DNS，同时承载外网的域名解析工作。但是有时候公司内网的 DNS 服务不稳定时，就比较尴尬，不用吧，解析不了内网域名，用吧，上不了外网。这时候用 DNS 的分流工具就是解决这个问题的好办法。这篇文章会拿 win10 举例，讲解 coredns 的简单配置，来解决 DNS 分流问题。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Node 的缺陷</title>
    <link href="https://blog.whyun.com/posts/the-defect-of-node/"/>
    <id>https://blog.whyun.com/posts/the-defect-of-node/</id>
    <published>2021-11-16T16:00:00.000Z</published>
    <updated>2021-12-01T10:28:01.500Z</updated>
    
    
    <summary type="html">提起 Node.js ，大家可能认为对其的优劣已经分辨的很清楚：由于其默认单线程，所以不适合做计算密集型操作；由于其异步 IO 特性，所以对于 IO 处理比较友好。但这其实是一种误解，当 IO 并发到一定的量级，一样会损耗 CPU 资源。在 Node.js 引以为豪的 IO 处理方面，依然有其做的不完善的地方，本篇文章就给大家一一解密。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>服务发现揭秘</title>
    <link href="https://blog.whyun.com/posts/service-discovery-start/"/>
    <id>https://blog.whyun.com/posts/service-discovery-start/</id>
    <published>2021-11-04T16:00:00.000Z</published>
    <updated>2022-01-04T03:21:09.200Z</updated>
    
    
    <summary type="html">随着互联网业务的发展，互联网用户基数越来越大，对于服务提供者来说带来的并发压力也越来越大。以往通过单机提供服务的方式已经被淘汰，多机冗余、负载均衡等名词也已经成为当前服务开发的基本要求。如何感知到一个服务的多个节点，如何平滑的对于服务进行扩容，如何保证负载均衡的高效性，传统的负载均衡基础设施面对越来越多的挑战。而服务发现技术的出现，对于上述问题带来了一个更有的解决方案。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>k8s 网络原理入门</title>
    <link href="https://blog.whyun.com/posts/k8s-startup/"/>
    <id>https://blog.whyun.com/posts/k8s-startup/</id>
    <published>2021-10-25T16:00:00.000Z</published>
    <updated>2021-12-31T08:25:15.180Z</updated>
    
    
    <summary type="html">之前通过讲 docker compose 教程 初步了解容器编排技术。但是 docker compose 默认只能在单机模式下运行，如果想在多个宿主机上运行，你可以借助 docker swarm 技术，你可以方便的将 docker-compose.yml 文件运用到 swarm 集群创建中。不过由于 kubernetes 的出现，swarm 的市场受到了极大排挤，目前各大公司利用容器编排技术，一般都会选择 kubernetes。本文顺应时势，在讲解容器编排技术的时候也是选择了 kubernetes 作为入门教程。本文作为教程的第一章，选择主要讲解的 kubernetes 内部网络原理。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>docker compose 教程</title>
    <link href="https://blog.whyun.com/posts/docker-compose-tutorial/"/>
    <id>https://blog.whyun.com/posts/docker-compose-tutorial/</id>
    <published>2021-10-20T16:00:00.000Z</published>
    <updated>2021-10-30T09:24:26.369Z</updated>
    
    
    <summary type="html">docker 容器提供了一种封装格式，可以将应用和其运行环境封装在一起，但是在线上实践过程中，应用和应用之间难免要产生依赖，一个上游的应用，可能会依赖于下游的一个或者几个应用给其提供数据。正所谓一个好汉三个帮，现实情况中，一个服务部署完成之后，对外不产生依赖的情况还是比较少的，但是 docker 在开始设计的时候没有过多考虑到容器之间依赖关系的处理。为了解决这个问题，在后续的发展中，一系列的容器编排的技术出现，比如说 `Docker Swarm` `Marathon` `Kubernetes` 等。上面提到的编排工具都是可以用在生产环境上的解决方案，不过本文要讲一下 `Docker Compose` 这个官方给出的编排解决方案，由于其功能比较简单，一般出于测试目的来使用，不过正式由于其简单，对于理解更高级的编排工具来说，算是一个好的入门。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>docker 容器的优雅重启方案</title>
    <link href="https://blog.whyun.com/posts/gracefully-restart-on-docker/"/>
    <id>https://blog.whyun.com/posts/gracefully-restart-on-docker/</id>
    <published>2021-10-11T16:00:00.000Z</published>
    <updated>2021-10-30T09:25:03.862Z</updated>
    
    
    <summary type="html">当我们将编写的程序部署到服务器之后，免不了会面临未知 bug 导致的程序崩溃退出问题，这个时候快速的将程序进行重启，显得尤为重要，特别是那种在后端和用户之间维持会话的服务。这篇文章就是讲一下，如果你的程序部署到 docker 后，如何做到优雅重启。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>dockerfile 使用教程</title>
    <link href="https://blog.whyun.com/posts/dockerfile-tutorials/"/>
    <id>https://blog.whyun.com/posts/dockerfile-tutorials/</id>
    <published>2021-10-08T16:00:00.000Z</published>
    <updated>2022-01-03T07:28:52.179Z</updated>
    
    
    <summary type="html">dockerfile 的使用教程，讲解 dockerfile 的 FROM COPY RUN ENTRYPOINT CMD 等指令的使用。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>go 私有化包构建路</title>
    <link href="https://blog.whyun.com/posts/go-private-package/"/>
    <id>https://blog.whyun.com/posts/go-private-package/</id>
    <published>2021-09-17T16:00:00.000Z</published>
    <updated>2021-12-26T11:37:11.776Z</updated>
    
    
    <summary type="html">使用私有托管的 go 包仓库的折腾之路</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>wsl 和 docker desktop 的安装教程</title>
    <link href="https://blog.whyun.com/posts/wsl-and-docker-desktop-install/"/>
    <id>https://blog.whyun.com/posts/wsl-and-docker-desktop-install/</id>
    <published>2021-09-08T16:00:00.000Z</published>
    <updated>2021-12-08T07:31:53.955Z</updated>
    
    
    <summary type="html">win10 中提供了 wsl 的解决方案，可以在 Windows 中直接开启 linux 子系统，十分方便开发者使用。同时一些重要的功能也要依赖于 wsl 才能启动，比如说 docker desktop。本教程就是演示一下如何在 win10 中配置 wsl ，并且如何正常使用 docker desktop。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>request 包中出现 DNS 解析超时的探究</title>
    <link href="https://blog.whyun.com/posts/request-dns/the-problem-of-dns-timeout-on-request-package/"/>
    <id>https://blog.whyun.com/posts/request-dns/the-problem-of-dns-timeout-on-request-package/</id>
    <published>2019-09-24T16:00:00.000Z</published>
    <updated>2021-10-30T09:26:07.038Z</updated>
    
    
    <summary type="html">request 请求时 DNS 解析超时的问题探究，包括若干 node 源码的解读</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Node 缓存优化之路</title>
    <link href="https://blog.whyun.com/posts/node/the-cache-design-in-node/"/>
    <id>https://blog.whyun.com/posts/node/the-cache-design-in-node/</id>
    <published>2018-10-15T16:00:00.000Z</published>
    <updated>2021-11-04T03:21:38.551Z</updated>
    
    
    <summary type="html">教你如何在Node中使用缓存，解决高并发问题</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>跨越万水千山认识你,跨根域的单点登陆设计</title>
    <link href="https://blog.whyun.com/posts/the-design-of-sso-between-diffrent-domain/"/>
    <id>https://blog.whyun.com/posts/the-design-of-sso-between-diffrent-domain/</id>
    <published>2018-05-26T16:00:00.000Z</published>
    <updated>2021-11-04T07:00:59.202Z</updated>
    
    
    <summary type="html">介绍单点登陆的原理和实现</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JNI系列教程之四——在NDK中使用第三方库</title>
    <link href="https://blog.whyun.com/posts/jnindk/use-thrid-part-library-in-ndk/"/>
    <id>https://blog.whyun.com/posts/jnindk/use-thrid-part-library-in-ndk/</id>
    <published>2015-12-30T16:00:00.000Z</published>
    <updated>2021-09-08T12:15:57.405Z</updated>
    
    
    <summary type="html">主要讲述如何在NDK中使用第三方库</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JNI系列教程三 —— NDK入门</title>
    <link href="https://blog.whyun.com/posts/jni-ndk/"/>
    <id>https://blog.whyun.com/posts/jni-ndk/</id>
    <published>2015-12-04T16:00:00.000Z</published>
    <updated>2021-10-30T09:25:20.570Z</updated>
    
    
    <summary type="html">安卓NDK的编写入门  包括不同安卓版本 不同cpu架构引用头文件库文件的路径规则等知识点</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JNI系列教程二——数据结构</title>
    <link href="https://blog.whyun.com/posts/jni/2-struct-transform/"/>
    <id>https://blog.whyun.com/posts/jni/2-struct-transform/</id>
    <published>2015-11-24T16:00:00.000Z</published>
    <updated>2021-09-08T12:06:13.854Z</updated>
    
    
    <summary type="html">JNI和java的数据结构的相互转化，JNI和java的函数相互调用</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JNI系列教程一——入门</title>
    <link href="https://blog.whyun.com/posts/jni/"/>
    <id>https://blog.whyun.com/posts/jni/</id>
    <published>2015-10-31T16:00:00.000Z</published>
    <updated>2021-09-08T12:15:34.107Z</updated>
    
    
    <summary type="html">JNI使用背景，windows、linux下JNI环境的配置，教你编译执行第一个JNI程序</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>nan入门教程</title>
    <link href="https://blog.whyun.com/posts/nan/"/>
    <id>https://blog.whyun.com/posts/nan/</id>
    <published>2015-05-23T16:00:00.000Z</published>
    <updated>2021-10-30T09:26:49.999Z</updated>
    
    
    <summary type="html">node的c++ API在不同版本中差异是巨大的，那么怎么解决这个问题呢，幸好有nan这个模块，它通过宏定义的方式把不同版本的API统一起来，极大简化了代码编写过程。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>即将面临的Node0.12中的C++API的改变</title>
    <link href="https://blog.whyun.com/posts/node0-12capi/"/>
    <id>https://blog.whyun.com/posts/node0-12capi/</id>
    <published>2015-05-18T16:00:00.000Z</published>
    <updated>2021-09-08T12:06:01.123Z</updated>
    
    
    <summary type="html">Node0.12和Node0.10的C++API方面发生了重大变化，nodejs官方文档中给出仅仅是几个简单例子，在具体使用过程中依靠这几个例子是不够的，当初在将Node0.10的扩展迁移到Node0.12时遇到了各种问题，直到遇到了这篇文章，我想我不得不将它翻译出来共享给大家了</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>js异步之惑</title>
    <link href="https://blog.whyun.com/posts/js/"/>
    <id>https://blog.whyun.com/posts/js/</id>
    <published>2015-03-19T16:00:00.000Z</published>
    <updated>2021-09-08T12:07:22.365Z</updated>
    
    
    <summary type="html">讲解js中异步的运行原理</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>NOOBS安装自定义系统</title>
    <link href="https://blog.whyun.com/posts/noobs/"/>
    <id>https://blog.whyun.com/posts/noobs/</id>
    <published>2014-11-20T16:00:00.000Z</published>
    <updated>2021-09-08T11:07:52.421Z</updated>
    
    
    <summary type="html">手把手教你怎么将一个自定义的操作系统加入到noobs中</summary>
    
    
    
    
  </entry>
  
</feed>
